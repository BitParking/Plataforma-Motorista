"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_framework_1 = require("@ionic/cli-framework");
const chalk_1 = require("chalk");
const errors_1 = require("./errors");
const hooks_1 = require("./hooks");
exports.BUILD_SCRIPT = 'ionic:build';
exports.COMMON_BUILD_COMMAND_OPTIONS = [
    {
        name: 'engine',
        summary: `Target engine (e.g. ${['browser', 'cordova'].map(e => chalk_1.default.green(e)).join(', ')})`,
        groups: [cli_framework_1.OptionGroup.Advanced],
    },
    {
        name: 'platform',
        summary: `Target platform on chosen engine (e.g. ${['ios', 'android'].map(e => chalk_1.default.green(e)).join(', ')})`,
        groups: [cli_framework_1.OptionGroup.Advanced],
    },
];
class BuildRunner {
    createBaseOptionsFromCommandLine(inputs, options) {
        const separatedArgs = options['--'];
        const platform = options['platform'] ? String(options['platform']) : undefined;
        const engine = this.determineEngineFromCommandLine(options);
        const project = options['project'] ? String(options['project']) : undefined;
        return { '--': separatedArgs ? separatedArgs : [], engine, platform, project };
    }
    determineEngineFromCommandLine(options) {
        if (options['engine']) {
            return String(options['engine']);
        }
        if (options['cordova']) {
            return 'cordova';
        }
        return 'browser';
    }
    beforeBuild(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const hook = new BuildBeforeHook(this.e);
            try {
                yield hook.run({ name: hook.name, build: options });
            }
            catch (e) {
                if (e instanceof cli_framework_1.BaseError) {
                    throw new errors_1.FatalException(e.message);
                }
                throw e;
            }
        });
    }
    run(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (options.engine === 'cordova' && !options.platform) {
                this.e.log.warn(`Cordova engine chosen without a target platform. This could cause issues. Please use the ${chalk_1.default.green('--platform')} option.`);
            }
            yield this.beforeBuild(options);
            yield this.buildProject(options);
            yield this.afterBuild(options);
        });
    }
    afterBuild(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const hook = new BuildAfterHook(this.e);
            try {
                yield hook.run({ name: hook.name, build: options });
            }
            catch (e) {
                if (e instanceof cli_framework_1.BaseError) {
                    throw new errors_1.FatalException(e.message);
                }
                throw e;
            }
        });
    }
}
exports.BuildRunner = BuildRunner;
class BuildBeforeHook extends hooks_1.Hook {
    constructor() {
        super(...arguments);
        this.name = 'build:before';
    }
}
class BuildAfterHook extends hooks_1.Hook {
    constructor() {
        super(...arguments);
        this.name = 'build:after';
    }
}
function build(deps, inputs, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            const runner = yield deps.project.requireBuildRunner();
            if (deps.project.name) {
                options['project'] = deps.project.name;
            }
            const opts = runner.createOptionsFromCommandLine(inputs, options);
            yield runner.run(opts);
        }
        catch (e) {
            if (e instanceof errors_1.RunnerException) {
                throw new errors_1.FatalException(e.message);
            }
            throw e;
        }
    });
}
exports.build = build;
