"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const Debug = require("debug");
const build_1 = require("../../build");
const debug = Debug('ionic:cli-utils:lib:project:ionic1:build');
class Ionic1BuildRunner extends build_1.BuildRunner {
    constructor(e) {
        super();
        this.e = e;
    }
    getCommandMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {};
        });
    }
    createOptionsFromCommandLine(inputs, options) {
        const baseOptions = super.createBaseOptionsFromCommandLine(inputs, options);
        return Object.assign({}, baseOptions, { type: 'ionic1' });
    }
    buildProject(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { pkgManagerArgs } = yield Promise.resolve().then(() => require('../../utils/npm'));
            const pkg = yield this.e.project.requirePackageJson();
            const shellOptions = { cwd: this.e.project.directory };
            debug(`Looking for ${chalk_1.default.cyan(build_1.BUILD_SCRIPT)} npm script.`);
            if (pkg.scripts && pkg.scripts[build_1.BUILD_SCRIPT]) {
                debug(`Invoking ${chalk_1.default.cyan(build_1.BUILD_SCRIPT)} npm script.`);
                const [pkgManager, ...pkgArgs] = yield pkgManagerArgs(this.e.config.get('npmClient'), { command: 'run', script: build_1.BUILD_SCRIPT });
                yield this.e.shell.run(pkgManager, pkgArgs, shellOptions);
            }
            else {
                yield this.e.shell.run('ionic-v1', ['build'], shellOptions);
            }
        });
    }
}
exports.Ionic1BuildRunner = Ionic1BuildRunner;
