"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_framework_1 = require("@ionic/cli-framework");
const network_1 = require("@ionic/cli-framework/utils/network");
const process_1 = require("@ionic/cli-framework/utils/process");
const string_1 = require("@ionic/cli-framework/utils/string");
const chalk_1 = require("chalk");
const Debug = require("debug");
const split2 = require("split2");
const through2 = require("through2");
const __1 = require("../");
const errors_1 = require("../../errors");
const serve_1 = require("../../serve");
const common_1 = require("../common");
const app_scripts_1 = require("./app-scripts");
const debug = Debug('ionic:cli-utils:lib:project:ionic-angular:serve');
const DEFAULT_PROGRAM = 'ionic-app-scripts';
exports.DEFAULT_SERVE_SCRIPT_VALUE = `${DEFAULT_PROGRAM} serve`;
class IonicAngularServeRunner extends serve_1.ServeRunner {
    constructor(e) {
        super();
        this.e = e;
    }
    getCommandMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {
                options: [
                    {
                        name: 'consolelogs',
                        summary: 'Print app console logs to Ionic CLI',
                        type: Boolean,
                        aliases: ['c'],
                        hint: chalk_1.default.dim('[app-scripts]'),
                    },
                    {
                        name: 'serverlogs',
                        summary: 'Print dev server logs to Ionic CLI',
                        type: Boolean,
                        aliases: ['s'],
                        groups: [cli_framework_1.OptionGroup.Hidden],
                        hint: chalk_1.default.dim('[app-scripts]'),
                    },
                    {
                        name: 'livereload-port',
                        summary: 'Use specific port for live-reload',
                        default: serve_1.DEFAULT_LIVERELOAD_PORT.toString(),
                        aliases: ['r'],
                        groups: [cli_framework_1.OptionGroup.Advanced],
                        hint: chalk_1.default.dim('[app-scripts]'),
                    },
                    {
                        name: 'dev-logger-port',
                        summary: 'Use specific port for dev server',
                        default: serve_1.DEFAULT_DEV_LOGGER_PORT.toString(),
                        groups: [cli_framework_1.OptionGroup.Advanced],
                        hint: chalk_1.default.dim('[app-scripts]'),
                    },
                    {
                        name: 'proxy',
                        summary: 'Do not add proxies',
                        type: Boolean,
                        default: true,
                        groups: [cli_framework_1.OptionGroup.Advanced],
                        hint: chalk_1.default.dim('[app-scripts]'),
                    },
                    {
                        name: 'source-map',
                        summary: 'Output sourcemaps',
                        type: Boolean,
                        groups: [cli_framework_1.OptionGroup.Advanced],
                        hint: chalk_1.default.dim('[app-scripts]'),
                    },
                    ...app_scripts_1.APP_SCRIPTS_OPTIONS,
                ],
                exampleCommands: [
                    '-- --enableLint false',
                ],
            };
        });
    }
    createOptionsFromCommandLine(inputs, options) {
        const baseOptions = super.createOptionsFromCommandLine(inputs, options);
        const sourcemaps = typeof options['source-map'] === 'boolean' ? Boolean(options['source-map']) : undefined;
        const livereloadPort = string_1.str2num(options['livereload-port'], serve_1.DEFAULT_LIVERELOAD_PORT);
        const notificationPort = string_1.str2num(options['dev-logger-port'], serve_1.DEFAULT_DEV_LOGGER_PORT);
        return Object.assign({}, baseOptions, { sourcemaps, consolelogs: options['consolelogs'] ? true : false, serverlogs: options['serverlogs'] ? true : false, livereloadPort,
            notificationPort, env: options['env'] ? String(options['env']) : undefined });
    }
    modifyOpenURL(url, options) {
        return `${url}${options.browserOption ? options.browserOption : ''}${options.platform ? `?ionicplatform=${options.platform}` : ''}`;
    }
    serveProject(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [externalIP, availableInterfaces] = yield this.selectExternalIP(options);
            const { port, livereloadPort, notificationPort } = yield common_1.findOpenIonicPorts(options.address, options);
            options.port = port;
            options.livereloadPort = livereloadPort;
            options.notificationPort = notificationPort;
            const { program } = yield this.serveCommandWrapper(options);
            const interval = setInterval(() => {
                this.e.log.info(`Waiting for connectivity with ${chalk_1.default.green(program)}...`);
            }, 5000);
            yield network_1.isHostConnectable('localhost', port);
            clearInterval(interval);
            return {
                custom: program !== DEFAULT_PROGRAM,
                protocol: 'http',
                localAddress: 'localhost',
                externalAddress: externalIP,
                externalNetworkInterfaces: availableInterfaces,
                port,
                externallyAccessible: ![serve_1.BIND_ALL_ADDRESS, ...serve_1.LOCAL_ADDRESSES].includes(externalIP),
            };
        });
    }
    serveCommandWrapper(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.servecmd(options);
            }
            catch (e) {
                if (!(e instanceof errors_1.ServeCommandNotFoundException)) {
                    throw e;
                }
                const pkg = '@ionic/app-scripts';
                this.e.log.nl();
                throw new errors_1.FatalException(`${chalk_1.default.green(pkg)} is required for ${chalk_1.default.green('ionic serve')} to work properly.\n` +
                    `Looks like ${chalk_1.default.green(pkg)} isn't installed in this project.\n\n` +
                    `This package is required for ${chalk_1.default.green('ionic serve')} in ${__1.prettyProjectName('angular')} projects.`);
            }
        });
    }
    servecmd(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { pkgManagerArgs } = yield Promise.resolve().then(() => require('../../utils/npm'));
            const pkg = yield this.e.project.requirePackageJson();
            let program = DEFAULT_PROGRAM;
            let args = yield this.serveOptionsToAppScriptsArgs(options);
            const shellOptions = { cwd: this.e.project.directory };
            debug(`Looking for ${chalk_1.default.cyan(serve_1.SERVE_SCRIPT)} npm script.`);
            if (pkg.scripts && pkg.scripts[serve_1.SERVE_SCRIPT]) {
                if (pkg.scripts[serve_1.SERVE_SCRIPT] === exports.DEFAULT_SERVE_SCRIPT_VALUE) {
                    debug(`Found ${chalk_1.default.cyan(serve_1.SERVE_SCRIPT)}, but it is the default. Not running.`);
                    args = ['serve', ...args];
                }
                else {
                    debug(`Invoking ${chalk_1.default.cyan(serve_1.SERVE_SCRIPT)} npm script.`);
                    const [pkgManager, ...pkgArgs] = yield pkgManagerArgs(this.e.config.get('npmClient'), { command: 'run', script: serve_1.SERVE_SCRIPT, scriptArgs: [...args] });
                    program = pkgManager;
                    args = pkgArgs;
                }
            }
            else {
                args = ['serve', ...args];
            }
            const p = this.e.shell.spawn(program, args, shellOptions);
            this.emit('cli-utility-spawn', p);
            return new Promise((resolve, reject) => {
                p.on('error', (err) => {
                    if (program === DEFAULT_PROGRAM && err.code === 'ENOENT') {
                        reject(new errors_1.ServeCommandNotFoundException(`${chalk_1.default.bold(DEFAULT_PROGRAM)} command not found.`));
                    }
                    else {
                        reject(err);
                    }
                });
                process_1.onBeforeExit(() => tslib_1.__awaiter(this, void 0, void 0, function* () { return p.kill(); }));
                const log = this.e.log.clone();
                log.setFormatter(cli_framework_1.createPrefixedFormatter(chalk_1.default.dim(`[${program === DEFAULT_PROGRAM ? 'app-scripts' : program}]`)));
                const ws = log.createWriteStream(cli_framework_1.LOGGER_LEVELS.INFO);
                if (program === DEFAULT_PROGRAM) {
                    const stdoutFilter = through2(function (chunk, enc, callback) {
                        const str = chunk.toString();
                        if (str.includes('server running')) {
                            resolve({ program }); // TODO: https://github.com/ionic-team/ionic-app-scripts/pull/1372
                        }
                        else {
                            this.push(chunk);
                        }
                        callback();
                    });
                    p.stdout.pipe(split2()).pipe(stdoutFilter).pipe(ws);
                    p.stderr.pipe(split2()).pipe(ws);
                }
                else {
                    p.stdout.pipe(split2()).pipe(ws);
                    p.stderr.pipe(split2()).pipe(ws);
                    resolve({ program });
                }
            });
        });
    }
    serveOptionsToAppScriptsArgs(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const args = {
                _: [],
                address: options.address,
                port: String(options.port),
                'livereload-port': String(options.livereloadPort),
                'dev-logger-port': String(options.notificationPort),
                consolelogs: options.consolelogs,
                serverlogs: options.serverlogs,
                nobrowser: true,
                nolivereload: !options.livereload,
                noproxy: !options.proxy,
                iscordovaserve: options.engine === 'cordova',
                generateSourceMap: typeof options.sourcemaps !== 'undefined' ? options.sourcemaps ? 'true' : 'false' : undefined,
                platform: options.platform,
                target: options.engine === 'cordova' ? 'cordova' : undefined,
                env: options.env,
            };
            return [...cli_framework_1.unparseArgs(args, { allowCamelCase: true, useEquals: false }), ...options['--']];
        });
    }
}
exports.IonicAngularServeRunner = IonicAngularServeRunner;
