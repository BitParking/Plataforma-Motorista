/// <reference types="node" />
import { NetworkInterface, PromptModule } from '@ionic/cli-framework';
import { ChildProcess } from 'child_process';
import { EventEmitter } from 'events';
import { CommandLineInputs, CommandLineOptions, CommandMetadata, CommandMetadataOption, DevAppDetails, IConfig, ILogger, IProject, IShell, LabServeDetails, Runner, ServeDetails, ServeOptions } from '../definitions';
import { PkgManagerOptions } from './utils/npm';
export declare const DEFAULT_DEV_LOGGER_PORT = 53703;
export declare const DEFAULT_LIVERELOAD_PORT = 35729;
export declare const DEFAULT_SERVER_PORT = 8100;
export declare const DEFAULT_LAB_PORT = 8200;
export declare const DEFAULT_DEVAPP_COMM_PORT = 53233;
export declare const BIND_ALL_ADDRESS = "0.0.0.0";
export declare const LOCAL_ADDRESSES: string[];
export declare const BROWSERS: string[];
export declare const SERVE_SCRIPT = "ionic:serve";
export declare const COMMON_SERVE_COMMAND_OPTIONS: ReadonlyArray<CommandMetadataOption>;
export interface ServeRunnerDeps {
    readonly config: IConfig;
    readonly log: ILogger;
    readonly project: IProject;
    readonly prompt: PromptModule;
    readonly shell: IShell;
}
export interface ServeRunner<T extends ServeOptions> {
    on(event: 'cli-utility-spawn', handler: (cp: ChildProcess) => void): this;
    emit(event: 'cli-utility-spawn', cp: ChildProcess): boolean;
}
export declare abstract class ServeRunner<T extends ServeOptions> extends EventEmitter implements Runner<T, ServeDetails> {
    protected devAppConnectionMade: boolean;
    protected abstract readonly e: ServeRunnerDeps;
    abstract getCommandMetadata(): Promise<Partial<CommandMetadata>>;
    abstract serveProject(options: T): Promise<ServeDetails>;
    abstract modifyOpenURL(url: string, options: T): string;
    createOptionsFromCommandLine(inputs: CommandLineInputs, options: CommandLineOptions): ServeOptions;
    determineEngineFromCommandLine(options: CommandLineOptions): string;
    displayDevAppMessage(options: T): Promise<void>;
    beforeServe(options: T): Promise<void>;
    run(options: T): Promise<ServeDetails>;
    afterServe(options: T, details: ServeDetails): Promise<void>;
    scheduleAfterServe(options: T, details: ServeDetails): void;
    gatherDevAppDetails(options: T, details: ServeDetails): Promise<DevAppDetails | undefined>;
    publishDevApp(options: T, details: DevAppDetails): Promise<string | undefined>;
    getSupportedDevAppPlugins(): Promise<Set<string>>;
    runLab(options: T, details: ServeDetails): Promise<LabServeDetails>;
    runLabServer(url: string, details: LabServeDetails): Promise<void>;
    promptToInstallPkg(options: Partial<PkgManagerOptions> & {
        pkg: string;
    }): Promise<boolean>;
    selectExternalIP(options: T): Promise<[string, NetworkInterface[]]>;
}
export declare function serve(deps: ServeRunnerDeps, inputs: CommandLineInputs, options: CommandLineOptions): Promise<ServeDetails>;
